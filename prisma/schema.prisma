generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole{
  LAWYER
  USER
}

model User {
  id            String    @id @default(cuid())
  name String?
  userName      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]

  lawyer        Lawyer?
  lawyerId      Int?

  prefrences        Preferences?
  prefernceId      Int?

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  notifications Notifications[] @relation("Notifications")
  consultations Consultation[] @relation("UserConsultations")

  @@map("users")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

enum NotiType {
  Message
  Consultation
}

model Notifications {
  id String @id @default(cuid())
  message String
  userId   String
  user     User     @relation("Notifications", fields: [userId], references: [id])
  read Boolean @default(false)
  sentLawyerId String?
  type NotiType @default(Message)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt 
}

model Lawyer {
  id                  String      @id @default(cuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @unique
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                String
  phoneNumber           String
  email                 String   @unique
  locality              String
  degrees               String[]
  institution           String
  about                 String
  publicWebsiteUrl      String?
  publicEmail           String
  numCasesPerformed     String
  locationCountry          String
  locationState         String?
  tags                  String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  consultations         Consultation[] @relation("LawyerConsultations")
}

model Preferences {
  id                    String    @id @default(cuid())
  showRegisterAsLawyer  Boolean   @default(true)
  nextPromptDate        DateTime?
  neverShowPrompt       Boolean   @default(false)
  
  user                  User      @relation(fields: [userId], references: [id])
  userId                String    @unique
}

model Consultation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserConsultations", fields: [userId], references: [id])
  lawyerId    String
  lawyer      Lawyer   @relation("LawyerConsultations", fields: [lawyerId], references: [id])
  DateTime        DateTime? 
  description String
  status      ConsultationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("consultations")
}

enum ConsultationStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}